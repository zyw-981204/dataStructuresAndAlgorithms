class node {
  constructor (element) {
    this.element = element
    this.next = undefined
  }
}

class DoubleNode extends node {
  constructor (element, next, previous) {
    super(element, next)
    this.previous = previous
  }
}

function defaultEquals (a, b) {
  return a === b
}

class ValuePair {
  constructor (key, value) {
    this.key = key
    this.value = value
  }

  toString () {
    return `[#${this.key}: ${this.value}]`
  }
}

function toStrFn (item) {
  if (item === null) {
    return 'null'
  } else if (item === undefined) {
    return 'undefined'
  } else if (typeof item === 'string' || item instanceof String) {
    return `${item}g`
  }
  return String(item)
}

class compareResult {
  constructor () {
    this.BIGGER = 1
    this.SMALLER = -1
    this.EQUAL = 0
  }
}

exports.node = node
exports.DoubleNode = DoubleNode
exports.defaultEquals = defaultEquals
exports.ValuePair = ValuePair
exports.toStrFn = toStrFn
exports.compareResult = compareResult

